<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_IndexedPosition" Id="{2f1b5667-a0f3-4b1e-97a1-207ac542be5f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FB_IndexedPosition

VAR
	// Configuration 		: ST_IndexedPositionConfiguration;
	Controls			: ST_IndexedPositionControls;
	// Status				: ST_IndexedPositionStatus;
	Links				: ST_IndexedPositionLinks;
	ActivityMonitor		: LREAL := 0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_M_StateMachine();

// Broadcast Part Presence Status
Controls.Front.PartPresent := Controls.AreaMonitoring OR Controls.ArrivalDetection;
Controls.Rear.PartPresent := Controls.AreaMonitoring OR Controls.ArrivalDetection;
Controls.Left.PartPresent := Controls.AreaMonitoring OR Controls.ArrivalDetection;
Controls.Right.PartPresent := Controls.AreaMonitoring OR Controls.ArrivalDetection;

// Broadcast State
Controls.Front.State := Controls.State;
Controls.Rear.State := Controls.State;
Controls.Right.State := Controls.State;
Controls.Left.State := Controls.State;

// Propogate Directional Controls Request to recieve to main level
(*
IF Controls.Request =  E_IndexedPositionTransitionRequest.NoRequest (*AND Controls.State = E_IndexedPositionStates.Starved *)THEN
	IF Controls.Front.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
		Controls.Request :=  E_IndexedPositionTransitionRequest.ReceiveFromFront;
	ELSIF Controls.Rear.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
		Controls.Request :=  E_IndexedPositionTransitionRequest.ReceiveFromRear;
	ELSIF Controls.Right.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
		Controls.Request :=  E_IndexedPositionTransitionRequest.ReceiveFromRight;
	ELSIF Controls.Left.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
		Controls.Request :=  E_IndexedPositionTransitionRequest.ReceiveFromLeft;
	END_IF
END_IF
*)

// Links.Self.State := State;
]]></ST>
    </Implementation>
    <Method Name="_M_StateMachine" Id="{da0ce787-3a30-4396-967f-e071a2d629b3}">
      <Declaration><![CDATA[METHOD PRIVATE _M_StateMachine : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*IF Configuration.BypassIndexedPosition THEN
	Controls.State := E_IndexedPositionStates.Bypass;
ELSE
	Controls.State := E_IndexedPositionStates.Idle;
END_IF*)

CASE Controls.State OF
	E_IndexedPositionStates.Starved:
		// Command 
		Controls.Request 	:= E_IndexedPositionTransitionRequest.NoRequest;
		// Error Handling
		
		// Branch Conditions
		IF NOT Controls.AreaMonitoring AND NOT Controls.ArrivalDetection THEN
			
		   	IF __ISVALIDREF(Links.Rear) THEN
				IF Links.Rear.Request = E_IndexedPositionSimplifiedRequest.Send THEN
					Controls.State 			:= E_IndexedPositionStates.ReceivingFromRear;
					Controls.Rear.Request 	:= E_IndexedPositionSimplifiedRequest.Recieve;
					// Controls.Request	 	:= E_IndexedPositionTransitionRequest.ReceiveFromRear;
				END_IF
			END_IF
			
			IF __ISVALIDREF(Links.Front) THEN
				IF  Links.Front.Request = E_IndexedPositionSimplifiedRequest.Send THEN
					Controls.State 			:= E_IndexedPositionStates.ReceivingFromFront;
					Controls.Front.Request 	:= E_IndexedPositionSimplifiedRequest.Recieve;
					// Controls.Request	 	:= E_IndexedPositionTransitionRequest.ReceiveFromFront;
				END_IF
			END_IF
			
			IF __ISVALIDREF(Links.Left) THEN
				IF  Links.Left.Request = E_IndexedPositionSimplifiedRequest.Send THEN
					Controls.State 			:= E_IndexedPositionStates.ReceivingFromLeft;
					Controls.Left.Request 	:= E_IndexedPositionSimplifiedRequest.Recieve;
					// Controls.Request	 	:= E_IndexedPositionTransitionRequest.ReceiveFromLeft;
				END_IF
			END_IF
			
			IF __ISVALIDREF(Links.Right) THEN
				IF   Links.Right.Request = E_IndexedPositionSimplifiedRequest.Send THEN
					Controls.State 			:= E_IndexedPositionStates.ReceivingFromRight;
					Controls.Right.Request 	:= E_IndexedPositionSimplifiedRequest.Recieve;
					// Controls.Request	 	:= E_IndexedPositionTransitionRequest.ReceiveFromRight;
				END_IF
			END_IF
			
		ELSIF Controls.AreaMonitoring AND Controls.Request = E_IndexedPositionTransitionRequest.NoRequest THEN
			Controls.State 			:= E_IndexedPositionStates.Idle;
			// Controls.Request	 	:= E_IndexedPositionTransitionRequest.NoRequest;
		END_IF
		
	E_IndexedPositionStates.Idle:
			
		// Error Handling
		
		// Branch Conditions
		IF Controls.AreaMonitoring AND Controls.ArrivalDetection THEN
			// Link Request for Handshake
			IF Controls.Request = E_IndexedPositionTransitionRequest.SendToFront THEN
				Controls.Front.Request := E_IndexedPositionSimplifiedRequest.Send;
			ELSIF Controls.Request = E_IndexedPositionTransitionRequest.SendToLeft THEN
				Controls.Left.Request 	:= E_IndexedPositionSimplifiedRequest.Send;
			ELSIF Controls.Request = E_IndexedPositionTransitionRequest.SendToRear THEN
				Controls.Rear.Request 	:= E_IndexedPositionSimplifiedRequest.Send;
			ELSIF Controls.Request = E_IndexedPositionTransitionRequest.SendToRight THEN
				Controls.Right.Request := E_IndexedPositionSimplifiedRequest.Send;
			END_IF
		
			IF Controls.Request = E_IndexedPositionTransitionRequest.SendToFront THEN
				IF __ISVALIDREF(Links.Front) THEN
					IF NOT Links.Front.PartPresent AND
					   Links.Front.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
						  
						Controls.State 			:= E_IndexedPositionStates.SendingToFront;
						Controls.Front.Request 	:= E_IndexedPositionSimplifiedRequest.NoRequest;
						Links.Front.Request 	:= E_IndexedPositionSimplifiedRequest.NoRequest;
						
					ELSIF Links.Front.PartPresent OR 
						  Links.Front.Request <> E_IndexedPositionSimplifiedRequest.Recieve OR
						  Links.Front.State <> E_IndexedPositionStates.Starved THEN
						  
						Controls.State := E_IndexedPositionStates.Blocked;
						
					END_IF
				END_IF
			
			ELSIF Controls.Request = E_IndexedPositionTransitionRequest.SendToLeft THEN
				IF __ISVALIDREF(Links.Left) THEN
					IF NOT Links.Left.PartPresent AND 
						  Links.Left.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
						  
						Controls.State 			:= E_IndexedPositionStates.SendingToLeft;
						Controls.Left.Request 	:= E_IndexedPositionSimplifiedRequest.NoRequest;
						Links.Left.Request 		:= E_IndexedPositionSimplifiedRequest.NoRequest;
						
					ELSIF Links.Left.PartPresent OR 
						  Links.Left.Request <> E_IndexedPositionSimplifiedRequest.Recieve OR
						  Links.Left.State <> E_IndexedPositionStates.Starved THEN
						  
						Controls.State := E_IndexedPositionStates.Blocked;
						
					END_IF
				END_IF
				
			ELSIF Controls.Request = E_IndexedPositionTransitionRequest.SendToRear THEN
				IF __ISVALIDREF(Links.Rear) THEN
					IF NOT Links.Rear.PartPresent AND
					   Links.Rear.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
						  
						Controls.State 			:= E_IndexedPositionStates.SendingToRear;
						Controls.Rear.Request 	:= E_IndexedPositionSimplifiedRequest.NoRequest;
						Links.Rear.Request 		:= E_IndexedPositionSimplifiedRequest.NoRequest;
						
					ELSIF Links.Rear.PartPresent OR 
						  Links.Rear.Request <> E_IndexedPositionSimplifiedRequest.Recieve OR 
						  Links.Rear.State <> E_IndexedPositionStates.Starved THEN
						  
						Controls.State := E_IndexedPositionStates.Blocked;
						
					END_IF
				END_IF
				
			ELSIF Controls.Request = E_IndexedPositionTransitionRequest.SendToRight THEN
				IF __ISVALIDREF(Links.Right) THEN
					IF NOT Links.Right.PartPresent AND
					   Links.Right.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
						  
						Controls.State 			:= E_IndexedPositionStates.SendingToRight;
						Controls.Right.Request 	:= E_IndexedPositionSimplifiedRequest.NoRequest;
						Links.Right.Request 	:= E_IndexedPositionSimplifiedRequest.NoRequest;
						
					ELSIF Links.Right.PartPresent OR 
						  Links.Right.Request <> E_IndexedPositionSimplifiedRequest.Recieve OR
						  Links.Right.State <> E_IndexedPositionStates.Starved THEN
						  
						Controls.State := E_IndexedPositionStates.Blocked;
						
					END_IF
				END_IF
				
			END_IF
			
		ELSIF NOT Controls.AreaMonitoring AND NOT Controls.ArrivalDetection AND Controls.Request = E_IndexedPositionTransitionRequest.NoRequest THEN
			Controls.State 		:= E_IndexedPositionStates.Starved;
			Controls.Request 	:= E_IndexedPositionTransitionRequest.NoRequest;
			
		ELSIF Controls.AreaMonitoring OR Controls.ArrivalDetection  THEN
			//
		END_IF
	
	E_IndexedPositionStates.Blocked:
		// Command
		// Controls.Request 	:= E_IndexedPositionTransitionRequest.NoRequest;
		// Error Handling
		
		// Branch Conditions
		IF Controls.AreaMonitoring AND Controls.ArrivalDetection  THEN
			IF __ISVALIDREF(Links.Front) THEN
				IF Controls.Request = E_IndexedPositionTransitionRequest.SendToFront AND 
				   NOT Links.Front.PartPresent AND 
				   Links.Front.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
						
				   	Controls.State := E_IndexedPositionStates.Idle;
				END_IF
			END_IF
			
			IF __ISVALIDREF(Links.Left) THEN
				IF Controls.Request = E_IndexedPositionTransitionRequest.SendToLeft AND 
			       NOT Links.Left.PartPresent AND 
				   Links.Left.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
				  
					Controls.State := E_IndexedPositionStates.Idle;
				END_IF
			END_IF
			
			IF __ISVALIDREF(Links.Rear) THEN
				IF Controls.Request = E_IndexedPositionTransitionRequest.SendToRear AND 
			       NOT Links.Rear.PartPresent AND 
				   Links.Rear.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
				  
					Controls.State := E_IndexedPositionStates.Idle;
				END_IF
			END_IF
			
			IF __ISVALIDREF(Links.Right) THEN
				IF Controls.Request = E_IndexedPositionTransitionRequest.SendToRight AND 
			       NOT Links.Right.PartPresent AND 
				   Links.Right.Request = E_IndexedPositionSimplifiedRequest.Recieve THEN
				  
					Controls.State := E_IndexedPositionStates.Idle;
				END_IF
			END_IF
			
		ELSIF NOT Controls.AreaMonitoring AND NOT Controls.ArrivalDetection  THEN
			// Starved or Error?
		END_IF
	
	E_IndexedPositionStates.ReceivingFromLeft,
	E_IndexedPositionStates.ReceivingFromRight,
	E_IndexedPositionStates.ReceivingFromFront,
	E_IndexedPositionStates.ReceivingFromRear:
		// Command
		
		// Error Handling
		
		// Branch Conditions
		IF Controls.ArrivalDetection THEN
			Controls.State 		:= E_IndexedPositionStates.Idle;
		END_IF
	
	E_IndexedPositionStates.SendingToLeft:
		// Command
		
		// Error Handling
		
		// Branch Conditions
		IF __ISVALIDREF(Links.Left) THEN
			IF Links.Left.State = E_IndexedPositionStates.Idle THEN
				Controls.State 		:= E_IndexedPositionStates.Starved;
			END_IF
		END_IF
	
	E_IndexedPositionStates.SendingToRight:
		// Command
		
		// Error Handling
		
		// Branch Conditions
		IF __ISVALIDREF(Links.Right) THEN
			IF Links.Right.State = E_IndexedPositionStates.Idle THEN
				Controls.State 		:= E_IndexedPositionStates.Starved;
			END_IF
		END_IF
		
	E_IndexedPositionStates.SendingToFront:
		// Command
		
		// Error Handling
		
		// Branch Conditions
		IF __ISVALIDREF(Links.Front) THEN
			IF Links.Front.State = E_IndexedPositionStates.Idle THEN
				Controls.State 		:= E_IndexedPositionStates.Starved;
			END_IF
		END_IF
		
	E_IndexedPositionStates.SendingToRear:
		// Command
		
		// Error Handling
		
		// Branch Conditions
		IF __ISVALIDREF(Links.Rear) THEN
			IF Links.REar.State = E_IndexedPositionStates.Idle THEN
				Controls.State 		:= E_IndexedPositionStates.Starved;
			END_IF
		END_IF
		
	E_IndexedPositionStates.Bypass:
		Controls.Request := E_IndexedPositionTransitionRequest.NoRequest;
		
	E_IndexedPositionStates.Fault:
		// Command
		Controls.Request := E_IndexedPositionTransitionRequest.NoRequest;
		
		// Error Handling
		
		// Branch Conditions
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Controls" Id="{b310475e-32bc-40cf-a46b-4cc5dc485c1e}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Controls : REFERENCE TO ST_IndexedPositionControls]]></Declaration>
      <Get Name="Get" Id="{c32935fb-0864-43ce-9559-b349cd738359}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Controls REF= Controls;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Links" Id="{9c6e14f0-9efa-4a56-b650-b0b8105c5a3a}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Links : REFERENCE TO ST_IndexedPositionLinks]]></Declaration>
      <Get Name="Get" Id="{908fadfb-bdbe-4eb2-90c4-0ea32058fac0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Links REF= Links;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_IndexedPosition">
      <LineId Id="39" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="86" Count="3" />
      <LineId Id="85" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="64" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_IndexedPosition._M_StateMachine">
      <LineId Id="221" Count="13" />
      <LineId Id="485" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="235" Count="1" />
      <LineId Id="609" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="637" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="577" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="578" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="611" Count="0" />
      <LineId Id="478" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="639" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="580" Count="0" />
      <LineId Id="484" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="607" Count="0" />
      <LineId Id="247" Count="2" />
      <LineId Id="608" Count="0" />
      <LineId Id="252" Count="3" />
      <LineId Id="614" Count="8" />
      <LineId Id="613" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="436" Count="1" />
      <LineId Id="260" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="632" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="261" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="566" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="443" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="584" Count="0" />
      <LineId Id="264" Count="0" />
      <LineId Id="505" Count="0" />
      <LineId Id="585" Count="0" />
      <LineId Id="493" Count="0" />
      <LineId Id="495" Count="2" />
      <LineId Id="627" Count="0" />
      <LineId Id="633" Count="0" />
      <LineId Id="499" Count="2" />
      <LineId Id="568" Count="0" />
      <LineId Id="502" Count="2" />
      <LineId Id="272" Count="1" />
      <LineId Id="586" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="510" Count="0" />
      <LineId Id="512" Count="2" />
      <LineId Id="629" Count="0" />
      <LineId Id="634" Count="0" />
      <LineId Id="516" Count="2" />
      <LineId Id="570" Count="0" />
      <LineId Id="519" Count="2" />
      <LineId Id="281" Count="0" />
      <LineId Id="588" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="589" Count="0" />
      <LineId Id="526" Count="0" />
      <LineId Id="528" Count="2" />
      <LineId Id="631" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="532" Count="2" />
      <LineId Id="572" Count="0" />
      <LineId Id="535" Count="2" />
      <LineId Id="290" Count="1" />
      <LineId Id="590" Count="0" />
      <LineId Id="292" Count="16" />
      <LineId Id="591" Count="0" />
      <LineId Id="309" Count="0" />
      <LineId Id="538" Count="0" />
      <LineId Id="543" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="539" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="593" Count="0" />
      <LineId Id="640" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="592" Count="0" />
      <LineId Id="540" Count="2" />
      <LineId Id="316" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="594" Count="0" />
      <LineId Id="641" Count="0" />
      <LineId Id="544" Count="0" />
      <LineId Id="595" Count="0" />
      <LineId Id="545" Count="2" />
      <LineId Id="322" Count="1" />
      <LineId Id="596" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="548" Count="0" />
      <LineId Id="597" Count="0" />
      <LineId Id="549" Count="2" />
      <LineId Id="327" Count="2" />
      <LineId Id="552" Count="0" />
      <LineId Id="330" Count="4" />
      <LineId Id="553" Count="2" />
      <LineId Id="335" Count="6" />
      <LineId Id="343" Count="0" />
      <LineId Id="378" Count="6" />
      <LineId Id="599" Count="0" />
      <LineId Id="385" Count="1" />
      <LineId Id="388" Count="0" />
      <LineId Id="600" Count="0" />
      <LineId Id="389" Count="6" />
      <LineId Id="601" Count="0" />
      <LineId Id="556" Count="1" />
      <LineId Id="399" Count="0" />
      <LineId Id="602" Count="0" />
      <LineId Id="400" Count="6" />
      <LineId Id="603" Count="0" />
      <LineId Id="559" Count="1" />
      <LineId Id="410" Count="0" />
      <LineId Id="604" Count="0" />
      <LineId Id="411" Count="6" />
      <LineId Id="605" Count="0" />
      <LineId Id="562" Count="1" />
      <LineId Id="421" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="422" Count="11" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_IndexedPosition.P_Controls.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_IndexedPosition.P_Links.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>